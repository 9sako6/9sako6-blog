{
  "title": "No.910 素数部分列 (★2.5)",
  "description": null,
  "tags": [
    "競技プログラミング",
    "yukicoder",
    "素数",
    "貪欲",
    "部分列",
    "部分列の削除"
  ],
  "created_at": "2019-10-20T00:00:00.000Z",
  "updated_at": "2019-11-06T00:00:00.000Z",
  "draft": false,
  "bodyContent": "# 問題\n\n[No.910 素数部分列](https://yukicoder.me/problems/no/910)\n\n# 考察\n文字列の構成要素の素数は`3`, `5`, `7`です。\nまずは、これらを1つずつ削除すれば良さそうです。\nなぜなら、`3`, `5`, `7`を残しておくことによって今後の操作で削除回数が増えることはないからです。\n\n次に、残っている`1`, `9`からなる文字列について考えます。\nこれらを使って作れる素数は`11`, `19`, `991`, `99991`などがあります。\n\nさて、`11`, `19`, `991`系をどの順番で消していくかが問題です。\n\n`19`, `991`系の存在から、`9`はいくつあっても素数になれないが、`1`があると素数になりうることがわかります。\nですので、`1`はなるべく`9`と一緒に消したい気持ちになります。`11`を消すのは一番最後にします。\n\n`19`, `991`系のどっちを先に消すかですが、`19`を先に消すのが良いです。\n例えば、`99191`を考えた時、先に`991`を消すと削除回数は1回ですが、先に`19`を消すと2回になります。\n\nということで、`19`を消すと`9`の左側にある`1`は全部消えるので、残る文字列は`999...111...`みたいなものになります。\n\n次に`991`系を消すのですが、消すのは`991`だけでよいです。`991`になって消える可能性があるのだがら、むやみに`9`を消費する必要はありません。\n\n最後に、残った`11`を削除すれば良いです。\n\n\n[submission](https://yukicoder.me/submissions/391932)\n\n\n\n# 学び\n`991`は素数！！！（本番では`991`が素数だと気づくのが遅すぎた。）\n複雑な実装をしないのがACのコツ。部分列`19`を消す処理が頭いいので覚えたい。\n\n```c++\n// 19を消す\ncnt_9++;\nif (cnt_1 > 0) {\n  cnt_1--;\n  cnt_9--;\n  ans++;\n}\n```",
  "bodyHtml": "<h1>問題</h1>\n<p><a href=\"https://yukicoder.me/problems/no/910\">No.910 素数部分列</a></p>\n<h1>考察</h1>\n<p>文字列の構成要素の素数は<code>3</code>, <code>5</code>, <code>7</code>です。\nまずは、これらを1つずつ削除すれば良さそうです。\nなぜなら、<code>3</code>, <code>5</code>, <code>7</code>を残しておくことによって今後の操作で削除回数が増えることはないからです。</p>\n<p>次に、残っている<code>1</code>, <code>9</code>からなる文字列について考えます。\nこれらを使って作れる素数は<code>11</code>, <code>19</code>, <code>991</code>, <code>99991</code>などがあります。</p>\n<p>さて、<code>11</code>, <code>19</code>, <code>991</code>系をどの順番で消していくかが問題です。</p>\n<p><code>19</code>, <code>991</code>系の存在から、<code>9</code>はいくつあっても素数になれないが、<code>1</code>があると素数になりうることがわかります。\nですので、<code>1</code>はなるべく<code>9</code>と一緒に消したい気持ちになります。<code>11</code>を消すのは一番最後にします。</p>\n<p><code>19</code>, <code>991</code>系のどっちを先に消すかですが、<code>19</code>を先に消すのが良いです。\n例えば、<code>99191</code>を考えた時、先に<code>991</code>を消すと削除回数は1回ですが、先に<code>19</code>を消すと2回になります。</p>\n<p>ということで、<code>19</code>を消すと<code>9</code>の左側にある<code>1</code>は全部消えるので、残る文字列は<code>999...111...</code>みたいなものになります。</p>\n<p>次に<code>991</code>系を消すのですが、消すのは<code>991</code>だけでよいです。<code>991</code>になって消える可能性があるのだがら、むやみに<code>9</code>を消費する必要はありません。</p>\n<p>最後に、残った<code>11</code>を削除すれば良いです。</p>\n<p><a href=\"https://yukicoder.me/submissions/391932\">submission</a></p>\n<h1>学び</h1>\n<p><code>991</code>は素数！！！（本番では<code>991</code>が素数だと気づくのが遅すぎた。）\n複雑な実装をしないのがACのコツ。部分列<code>19</code>を消す処理が頭いいので覚えたい。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// 19を消す</span>\ncnt_9++;\n<span class=\"hljs-keyword\">if</span> (cnt_1 &gt; <span class=\"hljs-number\">0</span>) {\n  cnt_1--;\n  cnt_9--;\n  ans++;\n}</code></pre>",
  "dir": "contents/posts",
  "base": "2019-10-20-yukicoder910.json",
  "ext": ".json",
  "sourceBase": "2019-10-20-yukicoder910.md",
  "sourceExt": ".md"
}