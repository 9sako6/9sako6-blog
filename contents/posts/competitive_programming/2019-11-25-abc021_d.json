{
  "title": "ABC021 D - 多重ループ",
  "description": "",
  "tags": [
    "競技プログラミング",
    "AtCoder",
    "二項係数",
    "重複組み合わせ",
    "組み合わせ",
    "条件を満たす整数の組の個数",
    "数学",
    "数列",
    "並べ替えれば条件を満たせる",
    "逆元",
    "逆元テーブル",
    "フェルマーの小定理",
    "割った余り"
  ],
  "created_at": "2019-11-25T00:00:00.000Z",
  "updated_at": "2019-11-26T00:00:00.000Z",
  "draft": false,
  "bodyContent": "# 問題\n\n[D - 多重ループ](https://atcoder.jp/contests/abc021/tasks/abc021_d)\n\n# 考察\n\n問題を簡単にしてみます。\\\\(1 \\leq a_1 < a_2 < ... < a_k < n\\\\)を満たす組み合わせを考えます。\\\\(1\\\\)以上\\\\(n\\\\)以下の整数を\\\\(k\\\\)個選び、全て異なる整数であれば上記の条件を満たすように並べることができます（「並べ替えれば条件を満たせる」系の考え方だと思って慣れる）。つまり、\\\\(1\\\\)以上\\\\(n\\\\)以下の整数を\\\\(k\\\\)個選ぶ組み合わせに等しいです 。これは\\\\({}_n C_k\\\\)です。\n\n\n本来は\\\\(1 \\leq a_1 \\leq a_2 \\leq ... \\leq a_k \\leq n\\\\)でした。これは、\\\\(1\\\\)以上\\\\(n\\\\)以下の整数を**重複を許して**\\\\(k\\\\)個選ぶ組み合わせに等しいです。\n\n\n重複組み合わせを簡単に説明します。\n重複組み合わせを理解するには**仕切りを使った考え方**が重要です。\n\n> 桃太郎将軍は鬼退治のために軍隊を作りたいです。猿山、犬里、雉子ヶ谷にはそれぞれ、猿、犬、雉子が無限匹住んでいます。桃太郎将軍はこれらの土地から猿、犬、雉子を何匹かずつ雇って、軍隊を編成することにしました。しかし、きびだんごの在庫の問題で合計6匹までしか雇えません。桃太郎将軍は、軍隊を編成するメンバーの種類のパターンが何通りあるかを知りたいです。これを求めてください。ただし、雇わない種類が存在してもよいとします。\n\n3種類の動物がいるので、2つの仕切りを使ってメンバーを3グループに分けてみます。\n\n- ○○|○○|○○\n- ○○|○|○○○\n- ○|○○○○|○\n- ○○○○○||○\n\n例えば上記のような分け方があります。○で示したもののうち、左のグループから順に猿、犬、雉子になると決めます。\n\n- 猿猿|犬犬|鳥鳥\n- 猿猿|犬|鳥鳥鳥\n- 猿|犬犬犬犬|鳥\n- 猿猿猿猿猿||鳥\n\n\nこの「6つの○」と「2つの|」の並べ方が求める場合の数に一致します。\nこの場合の数は、まず8つの場所（「6つの○」と「2つの|」の合計）を用意しておき、仕切りの場所2つ（もしくは○の場所6つ）を選ぶ（選ばなかった場所には自動的にもう一方が入る）、として解け、答えは\\\\( {}_8C_2 = {}_8C_6 = 28\\\\)通りです。\n\n一般化すると、\\\\(n\\\\)種類から重複を許して\\\\(k\\\\)個選ぶ組み合わせは\\\\({}_{n-1+k} C_k\\\\)です。\n\n\n脱線したので元の問題に戻ると、\\\\(1\\\\)以上\\\\(n\\\\)以下の整数を\\\\(k\\\\)個選ぶ重複組み合わせは\\\\({}_{n-1+k} C_k\\\\)なので、これが答えです。\n\n\nところで、この二項係数を求めるのにもひと工夫必要です。\n\n\\\\({}_nC_k = \\frac{n!}{k!(n-k)!}\\\\)なので、\\\\(k!^{-1}\\\\)と\\\\((n-k)!^{-1}\\\\)が必要です。これを求めるにはフェルマーの小定理を使います。\n\n> \\\\(p\\\\)を素数、\\\\(a\\\\)を\\\\(p\\\\)の倍数でない整数として\\\\(a^{p-1} \\equiv 1 \\pmod{p} \\\\)が成立する。（[引用元](https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a)）\n\nよって、\\\\(a \\times a^{p-2} \\equiv 1 \\pmod{p}\\\\)となるので、\\\\(a^{p-2}\\\\)は\\\\(a\\\\)の逆元です。　\nこれは、繰り返し二乗法を用いて\\\\(O(log p)\\\\)で求まります。\n\n[submission(Ruby)](https://atcoder.jp/contests/abc021/submissions/8651510)\n\n\nなお、この問題では必要ないですが、複数の二項係数を高速で求めたい場面は多々あります。そんな時は逆元テーブル（\\\\(1!, 2!, ..., n!\\\\)の逆元）を予め求めておく必要があります。それぞれ求めると\\\\(O(n logp)\\\\)かかりますが、最初に\\\\((n!)^{-1}\\\\)を\\\\(O(logp)\\\\)で求め、\\\\((n-1)!^{-1} = (n!)^{-1} \\times n \\\\)であることを利用して後ろから計算していくと\\\\(O(n+logp)\\\\)で求まります。\n\n\n[submission(Ruby)](https://atcoder.jp/contests/abc021/submissions/8651936)\n\n# 参考\n\n1. [AtCoder Beginner Contest 021 解説](https://www.slideshare.net/chokudai/abc021)\n2. [「1000000007 で割ったあまり」の求め方を総特集！ 〜 逆元から離散対数まで 〜](https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a)",
  "bodyHtml": "<h1>問題</h1>\n<p><a href=\"https://atcoder.jp/contests/abc021/tasks/abc021_d\">D - 多重ループ</a></p>\n<h1>考察</h1>\n<p>問題を簡単にしてみます。\\(1 \\leq a_1 &lt; a_2 &lt; ... &lt; a_k &lt; n\\)を満たす組み合わせを考えます。\\(1\\)以上\\(n\\)以下の整数を\\(k\\)個選び、全て異なる整数であれば上記の条件を満たすように並べることができます（「並べ替えれば条件を満たせる」系の考え方だと思って慣れる）。つまり、\\(1\\)以上\\(n\\)以下の整数を\\(k\\)個選ぶ組み合わせに等しいです 。これは\\({}_n C_k\\)です。</p>\n<p>本来は\\(1 \\leq a_1 \\leq a_2 \\leq ... \\leq a_k \\leq n\\)でした。これは、\\(1\\)以上\\(n\\)以下の整数を<strong>重複を許して</strong>\\(k\\)個選ぶ組み合わせに等しいです。</p>\n<p>重複組み合わせを簡単に説明します。\n重複組み合わせを理解するには<strong>仕切りを使った考え方</strong>が重要です。</p>\n<blockquote>\n<p>桃太郎将軍は鬼退治のために軍隊を作りたいです。猿山、犬里、雉子ヶ谷にはそれぞれ、猿、犬、雉子が無限匹住んでいます。桃太郎将軍はこれらの土地から猿、犬、雉子を何匹かずつ雇って、軍隊を編成することにしました。しかし、きびだんごの在庫の問題で合計6匹までしか雇えません。桃太郎将軍は、軍隊を編成するメンバーの種類のパターンが何通りあるかを知りたいです。これを求めてください。ただし、雇わない種類が存在してもよいとします。</p>\n</blockquote>\n<p>3種類の動物がいるので、2つの仕切りを使ってメンバーを3グループに分けてみます。</p>\n<ul>\n<li>○○|○○|○○</li>\n<li>○○|○|○○○</li>\n<li>○|○○○○|○</li>\n<li>○○○○○||○</li>\n</ul>\n<p>例えば上記のような分け方があります。○で示したもののうち、左のグループから順に猿、犬、雉子になると決めます。</p>\n<ul>\n<li>猿猿|犬犬|鳥鳥</li>\n<li>猿猿|犬|鳥鳥鳥</li>\n<li>猿|犬犬犬犬|鳥</li>\n<li>猿猿猿猿猿||鳥</li>\n</ul>\n<p>この「6つの○」と「2つの|」の並べ方が求める場合の数に一致します。\nこの場合の数は、まず8つの場所（「6つの○」と「2つの|」の合計）を用意しておき、仕切りの場所2つ（もしくは○の場所6つ）を選ぶ（選ばなかった場所には自動的にもう一方が入る）、として解け、答えは\\( {}_8C_2 = {}_8C_6 = 28\\)通りです。</p>\n<p>一般化すると、\\(n\\)種類から重複を許して\\(k\\)個選ぶ組み合わせは\\({}_{n-1+k} C_k\\)です。</p>\n<p>脱線したので元の問題に戻ると、\\(1\\)以上\\(n\\)以下の整数を\\(k\\)個選ぶ重複組み合わせは\\({}_{n-1+k} C_k\\)なので、これが答えです。</p>\n<p>ところで、この二項係数を求めるのにもひと工夫必要です。</p>\n<p>\\({}_nC_k = \\frac{n!}{k!(n-k)!}\\)なので、\\(k!^{-1}\\)と\\((n-k)!^{-1}\\)が必要です。これを求めるにはフェルマーの小定理を使います。</p>\n<blockquote>\n<p>\\(p\\)を素数、\\(a\\)を\\(p\\)の倍数でない整数として\\(a^{p-1} \\equiv 1 \\pmod{p} \\)が成立する。（<a href=\"https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a\">引用元</a>）</p>\n</blockquote>\n<p>よって、\\(a \\times a^{p-2} \\equiv 1 \\pmod{p}\\)となるので、\\(a^{p-2}\\)は\\(a\\)の逆元です。　\nこれは、繰り返し二乗法を用いて\\(O(log p)\\)で求まります。</p>\n<p><a href=\"https://atcoder.jp/contests/abc021/submissions/8651510\">submission(Ruby)</a></p>\n<p>なお、この問題では必要ないですが、複数の二項係数を高速で求めたい場面は多々あります。そんな時は逆元テーブル（\\(1!, 2!, ..., n!\\)の逆元）を予め求めておく必要があります。それぞれ求めると\\(O(n logp)\\)かかりますが、最初に\\((n!)^{-1}\\)を\\(O(logp)\\)で求め、\\((n-1)!^{-1} = (n!)^{-1} \\times n \\)であることを利用して後ろから計算していくと\\(O(n+logp)\\)で求まります。</p>\n<p><a href=\"https://atcoder.jp/contests/abc021/submissions/8651936\">submission(Ruby)</a></p>\n<h1>参考</h1>\n<ol>\n<li><a href=\"https://www.slideshare.net/chokudai/abc021\">AtCoder Beginner Contest 021 解説</a></li>\n<li><a href=\"https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a\">「1000000007 で割ったあまり」の求め方を総特集！ 〜 逆元から離散対数まで 〜</a></li>\n</ol>\n",
  "dir": "contents/posts/competitive_programming",
  "base": "2019-11-25-abc021_d.json",
  "ext": ".json",
  "sourceBase": "2019-11-25-abc021_d.md",
  "sourceExt": ".md"
}