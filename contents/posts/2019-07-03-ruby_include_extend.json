{
  "title": "Rubyのinclude, extendの違いをここで理解しよう",
  "description": "いつもこんがらがるinclude, extendの違いについて、ここでマスターする。さらに、これらを用いる利点について述べる。",
  "tags": [
    "Ruby"
  ],
  "created_at": "2019-07-03T00:00:00.000Z",
  "updated_at": null,
  "draft": false,
  "bodyContent": "ざっくり言うとそれぞれ次のことをする。\n\n- `include`\n  - モジュールのインスタンスメソッドが**インスタンスメソッド**として使えるようになる\n  - 定数も引き継がれる\n\n- `extend`\n  - モジュールのインスタンスメソッドが**特異メソッド**として使えるようになる\n\nでは、具体例を交えながらより詳しく見ていく。\n\n# include\n`Module#include`は引数で指定したモジュールのインスタンスメソッド、定数をレシーバのクラス（もしくはモジュール）に引き継ぐ。`mix-in`とも呼ばれる。要は他のモジュールを継承するようなことをする。\n\n```ruby\nmodule Hoge\n  Version = \"1.0\"\n  def hoge\n    \"hoge\"\n  end\nend\n```\n\n`mix-in`用のモジュール`Hoge`を定義した。定数`Version`とインスタンスメソッド`hoge`をもつ。これを`Bar`クラスに`include`する。\n\n```ruby\nclass Bar\n  include Hoge\nend\n\nb = Bar.new\nBar::Version # => 1.0\nb.hoge       # => hoge\n```\n\n`Hoge`モジュールを`Bar`クラス内で`include`すると、`Bar`クラスのインスタンス`b`から`hoge`を呼べるようになる。また、定数`Version`も`Bar`クラスに引き継がれる。\n\n# extend\n`Object#extend`は引数で指定したモジュールのインスタンスメソッドをレシーバの特異メソッドとして追加する。\n\nインスタンスに`extend`するパターンと、クラス内で`extend`するパターンがある。（どちらもやってることは同じで、表記が違うように見えるだけ。）\n\n`a`インスタンスの特異メソッドとして、`Greet#greet`を追加してみる。\n\n```ruby\nmodule Greet\n  def greet\n    \"hello\"\n  end\nend\n\na = \"hoge\"\na.extend(Greet)\na.greet # => hello\n```\n\n`Greet`モジュールのインスタンスメソッド`greet`を、`a`から呼べるようになった。\n\n\n次に、`Foo`クラスの特異メソッドとして、`Greet#greet`を追加してみる。\n\n```ruby\nmodule Greet\n  def greet\n    \"hello\"\n  end\nend\n\nclass Foo\n  extend Greet # この文脈におけるレシーバはselfである\nend\n\nFoo.greet # => hello\n```\n\n`Greet`モジュールのインスタンスメソッド`greet`が、`Foo`クラスの特異メソッドとして追加された。\n\n## extendはなにがうれしいの？\n- コードの見通しがよくなる場合がある\n- モジュール単位でまとまったメソッドを使いまわせる\n\nあたりか。\n「コードの見通しがよくなる場合がある」というのは、`extend`すれば例えばクラス内にごちゃごちゃ特異メソッドの定義を書かなくてもよくなることを意味する。\n\n`Bar`クラスに特異メソッドを定義する場合を考える。\n\n```ruby\nclass Bar\n  class << self\n    def greet\n      \"hello\"\n    end\n\n    def jp_greet\n      \"konnichiwa\"\n    end\n  end\n\n  def bar1\n    # 処理\n  end\n\n  def bar2\n    # 処理\n  end\n  attr_accessor :b1, :b2\nend\n```\n\n特異メソッド定義もインスタンスメソッド定義その他も混在している。\n単に記述を分割してもいいが、次のように`extend`を使う方がスマートだろう。\n\n```ruby\nmodule Greet\n  def greet\n    \"hello\"\n  end\n\n  def jp_greet\n    \"konnichiwa\"\n  end\nend\n\nclass Bar\n  extend Greet\n\n  def bar1\n    # 処理\n  end\n\n  def bar2\n    # 処理\n  end\n  attr_accessor :b1, :b2\nend\n```\n\n`Greet`モジュールを定義し、それを`extend`して`Bar`クラスの特異メソッドとした。こうしておけばさっきより見通しがいいし、なにより`Greet`モジュールを使い回すことができる。これが`extend`のうれしいポイントである。\n\n# まとめ\n\n- `include`\n  - クラスやモジュールに、他のモジュールのインスタンスメソッド、定数を引き継ぐ\n  - 引数に指定できるのはモジュールだけ\n\n- `extend`\n  - インスタンスに、他のモジュールのインスタンスメソッドを特異メソッドとして追加する\n  - 引数に指定できるのはモジュールだけ\n\n\n\n## 参考\n- [Ruby 2.6.0 リファレンスマニュアル > ライブラリ一覧 > 組み込みライブラリ > Moduleクラス > include](https://docs.ruby-lang.org/ja/latest/method/Module/i/include.html)\n- [Ruby 2.6.0 リファレンスマニュアル > ライブラリ一覧 > 組み込みライブラリ > Objectクラス > extend](https://docs.ruby-lang.org/ja/latest/method/Object/i/extend.html)\n- [Ruby 初級者のための class << self の話 (または特異クラスとメタクラス)](https://magazine.rubyist.net/articles/0046/0046-SingletonClassForBeginners.html)",
  "bodyHtml": "<p>ざっくり言うとそれぞれ次のことをする。</p>\n<ul>\n<li>\n<p><code>include</code></p>\n<ul>\n<li>モジュールのインスタンスメソッドが<strong>インスタンスメソッド</strong>として使えるようになる</li>\n<li>定数も引き継がれる</li>\n</ul>\n</li>\n<li>\n<p><code>extend</code></p>\n<ul>\n<li>モジュールのインスタンスメソッドが<strong>特異メソッド</strong>として使えるようになる</li>\n</ul>\n</li>\n</ul>\n<p>では、具体例を交えながらより詳しく見ていく。</p>\n<h1>include</h1>\n<p><code>Module#include</code>は引数で指定したモジュールのインスタンスメソッド、定数をレシーバのクラス（もしくはモジュール）に引き継ぐ。<code>mix-in</code>とも呼ばれる。要は他のモジュールを継承するようなことをする。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Hoge</span></span>\n  Version = <span class=\"hljs-string\">\"1.0\"</span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">hoge</span></span>\n    <span class=\"hljs-string\">\"hoge\"</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span></code></pre><p><code>mix-in</code>用のモジュール<code>Hoge</code>を定義した。定数<code>Version</code>とインスタンスメソッド<code>hoge</code>をもつ。これを<code>Bar</code>クラスに<code>include</code>する。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bar</span></span>\n  <span class=\"hljs-keyword\">include</span> Hoge\n<span class=\"hljs-keyword\">end</span>\n\nb = Bar.new\nBar::Version <span class=\"hljs-comment\"># =&gt; 1.0</span>\nb.hoge       <span class=\"hljs-comment\"># =&gt; hoge</span></code></pre><p><code>Hoge</code>モジュールを<code>Bar</code>クラス内で<code>include</code>すると、<code>Bar</code>クラスのインスタンス<code>b</code>から<code>hoge</code>を呼べるようになる。また、定数<code>Version</code>も<code>Bar</code>クラスに引き継がれる。</p>\n<h1>extend</h1>\n<p><code>Object#extend</code>は引数で指定したモジュールのインスタンスメソッドをレシーバの特異メソッドとして追加する。</p>\n<p>インスタンスに<code>extend</code>するパターンと、クラス内で<code>extend</code>するパターンがある。（どちらもやってることは同じで、表記が違うように見えるだけ。）</p>\n<p><code>a</code>インスタンスの特異メソッドとして、<code>Greet#greet</code>を追加してみる。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Greet</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span></span>\n    <span class=\"hljs-string\">\"hello\"</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\na = <span class=\"hljs-string\">\"hoge\"</span>\na.extend(Greet)\na.greet <span class=\"hljs-comment\"># =&gt; hello</span></code></pre><p><code>Greet</code>モジュールのインスタンスメソッド<code>greet</code>を、<code>a</code>から呼べるようになった。</p>\n<p>次に、<code>Foo</code>クラスの特異メソッドとして、<code>Greet#greet</code>を追加してみる。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Greet</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span></span>\n    <span class=\"hljs-string\">\"hello\"</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Foo</span></span>\n  extend Greet <span class=\"hljs-comment\"># この文脈におけるレシーバはselfである</span>\n<span class=\"hljs-keyword\">end</span>\n\nFoo.greet <span class=\"hljs-comment\"># =&gt; hello</span></code></pre><p><code>Greet</code>モジュールのインスタンスメソッド<code>greet</code>が、<code>Foo</code>クラスの特異メソッドとして追加された。</p>\n<h2>extendはなにがうれしいの？</h2>\n<ul>\n<li>コードの見通しがよくなる場合がある</li>\n<li>モジュール単位でまとまったメソッドを使いまわせる</li>\n</ul>\n<p>あたりか。\n「コードの見通しがよくなる場合がある」というのは、<code>extend</code>すれば例えばクラス内にごちゃごちゃ特異メソッドの定義を書かなくてもよくなることを意味する。</p>\n<p><code>Bar</code>クラスに特異メソッドを定義する場合を考える。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bar</span></span>\n  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> &lt;&lt; self</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span></span>\n      <span class=\"hljs-string\">\"hello\"</span>\n    <span class=\"hljs-keyword\">end</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jp_greet</span></span>\n      <span class=\"hljs-string\">\"konnichiwa\"</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar1</span></span>\n    <span class=\"hljs-comment\"># 処理</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar2</span></span>\n    <span class=\"hljs-comment\"># 処理</span>\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:b1</span>, <span class=\"hljs-symbol\">:b2</span>\n<span class=\"hljs-keyword\">end</span></code></pre><p>特異メソッド定義もインスタンスメソッド定義その他も混在している。\n単に記述を分割してもいいが、次のように<code>extend</code>を使う方がスマートだろう。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">module</span> <span class=\"hljs-title\">Greet</span></span>\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">greet</span></span>\n    <span class=\"hljs-string\">\"hello\"</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">jp_greet</span></span>\n    <span class=\"hljs-string\">\"konnichiwa\"</span>\n  <span class=\"hljs-keyword\">end</span>\n<span class=\"hljs-keyword\">end</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Bar</span></span>\n  extend Greet\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar1</span></span>\n    <span class=\"hljs-comment\"># 処理</span>\n  <span class=\"hljs-keyword\">end</span>\n\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">bar2</span></span>\n    <span class=\"hljs-comment\"># 処理</span>\n  <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">attr_accessor</span> <span class=\"hljs-symbol\">:b1</span>, <span class=\"hljs-symbol\">:b2</span>\n<span class=\"hljs-keyword\">end</span></code></pre><p><code>Greet</code>モジュールを定義し、それを<code>extend</code>して<code>Bar</code>クラスの特異メソッドとした。こうしておけばさっきより見通しがいいし、なにより<code>Greet</code>モジュールを使い回すことができる。これが<code>extend</code>のうれしいポイントである。</p>\n<h1>まとめ</h1>\n<ul>\n<li>\n<p><code>include</code></p>\n<ul>\n<li>クラスやモジュールに、他のモジュールのインスタンスメソッド、定数を引き継ぐ</li>\n<li>引数に指定できるのはモジュールだけ</li>\n</ul>\n</li>\n<li>\n<p><code>extend</code></p>\n<ul>\n<li>インスタンスに、他のモジュールのインスタンスメソッドを特異メソッドとして追加する</li>\n<li>引数に指定できるのはモジュールだけ</li>\n</ul>\n</li>\n</ul>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://docs.ruby-lang.org/ja/latest/method/Module/i/include.html\">Ruby 2.6.0 リファレンスマニュアル &gt; ライブラリ一覧 &gt; 組み込みライブラリ &gt; Moduleクラス &gt; include</a></li>\n<li><a href=\"https://docs.ruby-lang.org/ja/latest/method/Object/i/extend.html\">Ruby 2.6.0 リファレンスマニュアル &gt; ライブラリ一覧 &gt; 組み込みライブラリ &gt; Objectクラス &gt; extend</a></li>\n<li><a href=\"https://magazine.rubyist.net/articles/0046/0046-SingletonClassForBeginners.html\">Ruby 初級者のための class &lt;&lt; self の話 (または特異クラスとメタクラス)</a></li>\n</ul>\n",
  "dir": "contents/posts",
  "base": "2019-07-03-ruby_include_extend.json",
  "ext": ".json",
  "sourceBase": "2019-07-03-ruby_include_extend.md",
  "sourceExt": ".md"
}