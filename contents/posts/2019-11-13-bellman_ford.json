{
  "title": "Bellman-Ford法の解説",
  "description": null,
  "tags": [
    "グラフ",
    "単一始点最短路問題",
    "Bellman-Ford法"
  ],
  "created_at": "2019-11-13T00:00:00.000Z",
  "updated_at": "2019-11-13T00:00:00.000Z",
  "draft": false,
  "bodyContent": "この記事では、\\\\(|V| - 1\\\\)回のループで最短距離が求まる理由にも触れて解説します。\n間違ってたらつっこみをください。\n\n# Bellman-Ford法\n重み付き有向グラフにおいて、始点を固定したとき、その始点と任意の頂点との間の最短距離を求めるアルゴリズムです。\nつまり、単一始点最短路問題を解くアルゴリズムです。\n\n負の重みを持つ辺があっても使えます。さらに、負閉路（辺の重みの総和が負になる閉路）の検出にも使えます。\n\n## アルゴリズムの説明\n\n頂点の集合を\\\\(V\\\\)、辺の集合を\\\\(E\\\\)とします。計算量は\\\\(O(|V||E|)\\\\)です（この理由は後述）。\n\n始点\\\\(s\\\\)から頂点\\\\(i\\\\)への最短距離を\\\\(d[i]\\\\)とします。\n最初は\\\\(d[s]\\\\)を\\\\(0\\\\)、 \\\\(d[i]\\\\)を十分大きな数で初期化しておきます。\n\n```c++\nint d[V];\nfill(d, d + V, INF);\nd[s] = 0;\n```\n\nその後、\\\\(|V| - 1\\\\)回ループを回し、全ての辺を**緩和**することで全ての頂点\\\\(i\\\\)に対して\\\\(d[i]\\\\)が求まります。\n緩和というのは、最短距離と思われる距離に置き換える操作のことです。（\\\\(INF\\\\)だった距離を、始点から求まった距離で置き換えてどんどん最短距離に近づけていく操作です。）\n\n```c++\nstruct Edge {\n    int from, to, cost;\n};\n\nfor (int i = 0; i < V - 1; ++i) {\n  for (int j = 0; j < E; ++j) \n    Edge e = edges[j];\n    if (d[e.from] != INF && d[e.to] > d[e.from] + e.cost) {\n      d[e.to] = d[e.from] + e.cost; // 緩和\n    }\n  }\n}\n```\n\n緩和については合意できるかと思います。`e.from`から`e.to`へ、もっと短い距離でいけるなら更新しているだけです。`d[e.from] != INF`としているのは、単に`d[e.from] == INF`のとき緩和にならないからです。\n\n理解し難いのは、\\\\(|V| - 1\\\\)回ループを回せば最短距離が求まるという点かもしれません。\n\n## \\\\(|V| - 1\\\\)回のループで最短距離が求まる理由\n\nこれを理解するには、まず最短路と緩和の性質である「経路緩和性」を知る必要があります。\n\n\\\\(s = v_0\\\\)から\\\\(v_k\\\\)に至る最短路を\\\\(p = <v_0, v_1, ..., v_k> \\\\)と書くことにします。\n\n>**経路緩和性**   \n\\\\(p = <v_0, v_1, ..., v_k> \\\\)が\\\\(s = v_0\\\\)から\\\\(v_k\\\\)に至る最短路で, \\\\(p\\\\)の辺が\\\\((v_0, v_1), (v_1, v_2), ..., (v_{k-1}, v_k)\\\\)の順で緩和されたとき, \\\\(d[v_k]=\\delta(s, v_k)\\\\)が成立する。ただし、\\\\(\\delta(s, v_k)\\\\)は\\\\(s\\\\)から\\\\(v_k\\\\)への最短距離。  \n（参考2より）\n\nこれは帰納法で証明することができます。（ここでは書きません。参考2に載っています。）\n\n**つまり、1回目のループでは、始点から、始点に隣接する点への最短距離が求まります。次のループでは、始点に隣接する点から、それらに隣接する点への最短距離が求まります。このように、始点から順に最短距離が求まっていって、高々\\\\(|V|-1\\\\)回のループで任意の点への最短距離が求まります。**\n\nなぜ高々\\\\(|V| - 1\\\\)回なのかを説明します。負閉路のない場合を考えると、最短路において、同じ頂点を2回以上通ることはありません。同じ頂点を2回以上通っても、距離が伸びるだけだからです。つまり、最短路は高々\\\\(|V| - 1\\\\)個の辺しか通らないので、最短路の最大パス長は\\\\(|V| - 1\\\\)です。したがって、\\\\(|V| - 1\\\\)回のループを回せば、最短路が求まります。\n\nということで、計算量は\\\\(O(|V||E|)\\\\)です。\n\n## 負閉路の検出\n\\\\(|V| - 1\\\\)回のループで最短路が求まることを利用して、負閉路を検出することができます。\nこれは簡単で、\\\\(|V|\\\\)回目のループで更新が発生するかどうかを調べれば良いです。\n\n\n```c++\nfor (int i = 0; i < V; ++i) {\n  for (int j = 0; j < E; ++j) {\n    Edge e = edges[j];\n    if (d[e.from] != INF && d[e.to] > d[e.from] + e.cost) {\n      if (i == V - 1) {\n        cout << \"NEGATIVE CYCLE\" << endl;\n        return 0;\n      }\n      d[e.to] = d[e.from] + e.cost; // 緩和\n    }\n  }\n}\n```\n\n## コード\n\nVerify用問題([単一始点最短経路（負の重みをもつ辺を含む）](https://onlinejudge.u-aizu.ac.jp/problems/GRL_1_B))です。\n\n[submission](https://onlinejudge.u-aizu.ac.jp/status/users/qsako6/submissions/1/GRL_1_B/judge/3986695/C++14)\n\n```c++\n#include <iostream>\n\nusing namespace std;\nconst int INF = (1 << 30);\n\nstruct Edge {\n  int from, to, cost;\n};\n\nint main() {\n  int V, E, r;\n  cin >> V >> E >> r;\n  Edge edges[E];\n  for (int i = 0; i < E; ++i) {\n    int s, t, c;\n    cin >> s >> t >> c;\n    edges[i] = Edge({s, t, c});\n  }\n  int d[V];\n  fill(d, d + V, INF);\n  d[r] = 0;\n  for (int i = 0; i < V; ++i) {\n    for (int j = 0; j < E; ++j) {\n      Edge e = edges[j];\n      if (d[e.from] != INF && d[e.to] > d[e.from] + e.cost) {\n        if (i == V - 1) {\n          cout << \"NEGATIVE CYCLE\" << endl;\n          return 0;\n        }\n        d[e.to] = d[e.from] + e.cost;\n      }\n    }\n  }\n  for (int i = 0; i < V; ++i) {\n    if (d[i] == INF) {\n      cout << \"INF\" << endl;\n    } else {\n      cout << d[i] << endl;\n    }\n  }\n\n  return 0;\n}\n```\n\n# 参考\n1. [https://ja.wikipedia.org/wiki/ベルマン–フォード法](https://ja.wikipedia.org/wiki/%E3%83%99%E3%83%AB%E3%83%9E%E3%83%B3%E2%80%93%E3%83%95%E3%82%A9%E3%83%BC%E3%83%89%E6%B3%95)\n1. [http://agent.inf.kyushu-u.ac.jp/~yokoo/lecture/DA2_09.pdf](http://agent.inf.kyushu-u.ac.jp/~yokoo/lecture/DA2_09.pdf)",
  "bodyHtml": "<p>この記事では、\\(|V| - 1\\)回のループで最短距離が求まる理由にも触れて解説します。\n間違ってたらつっこみをください。</p>\n<h1>Bellman-Ford法</h1>\n<p>重み付き有向グラフにおいて、始点を固定したとき、その始点と任意の頂点との間の最短距離を求めるアルゴリズムです。\nつまり、単一始点最短路問題を解くアルゴリズムです。</p>\n<p>負の重みを持つ辺があっても使えます。さらに、負閉路（辺の重みの総和が負になる閉路）の検出にも使えます。</p>\n<h2>アルゴリズムの説明</h2>\n<p>頂点の集合を\\(V\\)、辺の集合を\\(E\\)とします。計算量は\\(O(|V||E|)\\)です（この理由は後述）。</p>\n<p>始点\\(s\\)から頂点\\(i\\)への最短距離を\\(d[i]\\)とします。\n最初は\\(d[s]\\)を\\(0\\)、 \\(d[i]\\)を十分大きな数で初期化しておきます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">int</span> d[V];\nfill(d, d + V, INF);\nd[s] = <span class=\"hljs-number\">0</span>;</code></pre><p>その後、\\(|V| - 1\\)回ループを回し、全ての辺を<strong>緩和</strong>することで全ての頂点\\(i\\)に対して\\(d[i]\\)が求まります。\n緩和というのは、最短距離と思われる距離に置き換える操作のことです。（\\(INF\\)だった距離を、始点から求まった距離で置き換えてどんどん最短距離に近づけていく操作です。）</p>\n<pre><code class=\"hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Edge</span> {</span>\n    <span class=\"hljs-keyword\">int</span> from, to, cost;\n};\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V - <span class=\"hljs-number\">1</span>; ++i) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; E; ++j) \n    Edge e = edges[j];\n    <span class=\"hljs-keyword\">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost) {\n      d[e.to] = d[e.from] + e.cost; <span class=\"hljs-comment\">// 緩和</span>\n    }\n  }\n}</code></pre><p>緩和については合意できるかと思います。<code>e.from</code>から<code>e.to</code>へ、もっと短い距離でいけるなら更新しているだけです。<code>d[e.from] != INF</code>としているのは、単に<code>d[e.from] == INF</code>のとき緩和にならないからです。</p>\n<p>理解し難いのは、\\(|V| - 1\\)回ループを回せば最短距離が求まるという点かもしれません。</p>\n<h2>\\(|V| - 1\\)回のループで最短距離が求まる理由</h2>\n<p>これを理解するには、まず最短路と緩和の性質である「経路緩和性」を知る必要があります。</p>\n<p>\\(s = v_0\\)から\\(v_k\\)に至る最短路を\\(p = &lt;v_0, v_1, ..., v_k&gt; \\)と書くことにします。</p>\n<blockquote>\n<p><strong>経路緩和性</strong><br>\n\\(p = &lt;v_0, v_1, ..., v_k&gt; \\)が\\(s = v_0\\)から\\(v_k\\)に至る最短路で, \\(p\\)の辺が\\((v_0, v_1), (v_1, v_2), ..., (v_{k-1}, v_k)\\)の順で緩和されたとき, \\(d[v_k]=\\delta(s, v_k)\\)が成立する。ただし、\\(\\delta(s, v_k)\\)は\\(s\\)から\\(v_k\\)への最短距離。<br>\n（参考2より）</p>\n</blockquote>\n<p>これは帰納法で証明することができます。（ここでは書きません。参考2に載っています。）</p>\n<p><strong>つまり、1回目のループでは、始点から、始点に隣接する点への最短距離が求まります。次のループでは、始点に隣接する点から、それらに隣接する点への最短距離が求まります。このように、始点から順に最短距離が求まっていって、高々\\(|V|-1\\)回のループで任意の点への最短距離が求まります。</strong></p>\n<p>なぜ高々\\(|V| - 1\\)回なのかを説明します。負閉路のない場合を考えると、最短路において、同じ頂点を2回以上通ることはありません。同じ頂点を2回以上通っても、距離が伸びるだけだからです。つまり、最短路は高々\\(|V| - 1\\)個の辺しか通らないので、最短路の最大パス長は\\(|V| - 1\\)です。したがって、\\(|V| - 1\\)回のループを回せば、最短路が求まります。</p>\n<p>ということで、計算量は\\(O(|V||E|)\\)です。</p>\n<h2>負閉路の検出</h2>\n<p>\\(|V| - 1\\)回のループで最短路が求まることを利用して、負閉路を検出することができます。\nこれは簡単で、\\(|V|\\)回目のループで更新が発生するかどうかを調べれば良いです。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; E; ++j) {\n    Edge e = edges[j];\n    <span class=\"hljs-keyword\">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost) {\n      <span class=\"hljs-keyword\">if</span> (i == V - <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"NEGATIVE CYCLE\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n      }\n      d[e.to] = d[e.from] + e.cost; <span class=\"hljs-comment\">// 緩和</span>\n    }\n  }\n}</code></pre><h2>コード</h2>\n<p>Verify用問題(<a href=\"https://onlinejudge.u-aizu.ac.jp/problems/GRL_1_B\">単一始点最短経路（負の重みをもつ辺を含む）</a>)です。</p>\n<p><a href=\"https://onlinejudge.u-aizu.ac.jp/status/users/qsako6/submissions/1/GRL_1_B/judge/3986695/C++14\">submission</a></p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> INF = (<span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">30</span>);\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">Edge</span> {</span>\n  <span class=\"hljs-keyword\">int</span> from, to, cost;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n  <span class=\"hljs-keyword\">int</span> V, E, r;\n  <span class=\"hljs-built_in\">cin</span> &gt;&gt; V &gt;&gt; E &gt;&gt; r;\n  Edge edges[E];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; E; ++i) {\n    <span class=\"hljs-keyword\">int</span> s, t, c;\n    <span class=\"hljs-built_in\">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; c;\n    edges[i] = Edge({s, t, c});\n  }\n  <span class=\"hljs-keyword\">int</span> d[V];\n  fill(d, d + V, INF);\n  d[r] = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; E; ++j) {\n      Edge e = edges[j];\n      <span class=\"hljs-keyword\">if</span> (d[e.from] != INF &amp;&amp; d[e.to] &gt; d[e.from] + e.cost) {\n        <span class=\"hljs-keyword\">if</span> (i == V - <span class=\"hljs-number\">1</span>) {\n          <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"NEGATIVE CYCLE\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        }\n        d[e.to] = d[e.from] + e.cost;\n      }\n    }\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; V; ++i) {\n    <span class=\"hljs-keyword\">if</span> (d[i] == INF) {\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"INF\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; d[i] &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre><h1>参考</h1>\n<ol>\n<li><a href=\"https://ja.wikipedia.org/wiki/%E3%83%99%E3%83%AB%E3%83%9E%E3%83%B3%E2%80%93%E3%83%95%E3%82%A9%E3%83%BC%E3%83%89%E6%B3%95\">https://ja.wikipedia.org/wiki/ベルマン–フォード法</a></li>\n<li><a href=\"http://agent.inf.kyushu-u.ac.jp/~yokoo/lecture/DA2_09.pdf\">http://agent.inf.kyushu-u.ac.jp/~yokoo/lecture/DA2_09.pdf</a></li>\n</ol>\n",
  "dir": "contents/posts",
  "base": "2019-11-13-bellman_ford.json",
  "ext": ".json",
  "sourceBase": "2019-11-13-bellman_ford.md",
  "sourceExt": ".md"
}