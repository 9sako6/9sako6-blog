{
  "title": "競技プログラミングにおけるオレオレ典型知識",
  "description": null,
  "tags": [
    "競技プログラミング",
    "C++",
    "Ruby",
    "典型"
  ],
  "created_at": "2019-07-25T00:00:00.000Z",
  "updated_at": null,
  "draft": true,
  "bodyContent": "くさころです。ころころ。「典型力」をご存知ですか。\n\n[競技プログラミングの強みと「典型力」について - chokudaiのブログ](http://chokudai.hatenablog.com/entry/2018/04/23/165232)\n\nchokudaiさんの記事を読んで、干し芋のリストに「典型力」が加わったので自分なりに得た知識の言語化を試みます。\n特に、こういった知識はなかなか言語化されてないと思うので。\n内容は思いつき次第追加します。\n\n## 注意\n- くさころは緑コーダーなので上級者の参考にはならないと思います\n- 自分にしかわからない書き方をしているかもしれませんし、間違った知識かもしれません。あまり鵜呑みにしないでください\n- 時間とともに更新されていく系の記事です\n\n# 方針を立てる\n書かれている順番にやれということではないです。\n\n- 愚直な解法を考えて、そこから計算量を落とす\n- 前処理をすることで計算量を落とせるか\n- 処理を分けることで計算量を落とせるか\n- 分割して考えられるか、状態をまとめて扱えるか→DPを疑ってみる\n- 数え上げ→DPを疑ってみる\n- 最もシンプルな場合から着想を得る\n- 最大（最小）となる場合を考える\n- 操作\n  - 逆から考えてみる\n  - もっとシンプルな操作に言い換えられるか\n\n- 知らないアルゴリズムです\n  - 英語でググる（そのコンテストにおいて可能なら）\n  - 蟻本を眺める（そのコンテストにおいて可能なら）\n\n- [競技プログラミング問題パターン - yukicoder](https://yukicoder.me/wiki/pattern)\n\n解けそうな方針が立ったら、計算量を見積もります。\n\n\n# 計算量\n- 制約によっては\\\\(2^N\\\\)を疑う\n- \\\\(N=10^5\\\\)で\\\\(N\\log_2 N \\simeq 16.6 \\times 10^5 \\\\)\n- \\\\(N=10^6\\\\)で\\\\(N\\log_2 N \\simeq 19.9 \\times 10^6 \\\\)\n- \\\\(\\frac{N}{1} + \\frac{N}{2} + \\frac{N}{3} + ... + \\frac{N}{N} = NlogN \\\\)\n- \\\\(N\\sqrt{N}\\\\)は簡単な処理で\\\\(N=10^5\\\\)くらいならたぶん間に合う（\\\\(N\\sqrt{N} \\simeq 316 \\times 10^5 \\simeq 3 \\times 10^8  \\\\)）\n\n# WAを出したら\n- 論理\n  - 極端に大きな値、小さな値を入れてみる（コーナーケース）\n  - 同じ値を複数入れてみる\n  - 制約を見間違えてないか\n  - 問題文を読み間違えてないか（[競技プログラミングにおける問題文の読み方](https://9sako6.me/posts/2019/07/21/how_to_read_a_sentence/)）\n  - \\\\(mod\\\\)計算を忘れてないか\n  - 出力形式を間違えてないか\n- 言語\n  - オーバーフローしてないか\n  - 初期化を忘れてないか\n  - 十分な大きさの配列を確保しているか\n  - 変数名を間違えてないか\n  - 演算子の優先度によるバグ\n  - ライブラリのバグ\n\n# グラフ\n- 木とみなせるか\n- 頂点数\\\\(\\leq 300\\\\)くらいならワーシャルフロイド法の適用を疑ってみる\n\n# DP\n- 分割して考えられるか、状態をまとめて扱えるか\n- 十分大きな配列を用意する\n- 初期化する\n  - 最小化なら\\\\(INF\\\\)、最大化なら\\\\(0\\\\)か\\\\(-INF\\\\)で\n- 初期条件を考える\n- DPの気持ちを思い出す（一度計算した値を再利用）\n\n\n# XOR\n[テルさんのツイート](https://twitter.com/TeruMiyake/status/1150695360223797248)より引用\n\n```c++\n1. 結合則が成り立つ // どんな順番で計算してもいい  \n2. 2つ同じものがくっつくと対消滅する // a^a=0。a^b=0 -> a=bも言える  \n3. 任意の偶数nについて、n^(n+1)=1 // 偶数の右端桁は0なので n^n^1=0^1=1  \n4. a+b >= a^b かつ 桁あふれしない // なお等号成立は「どの桁も繰り上がらないとき」  \n5. a^x == b^x <=> a == b // ^x をしても式の意味が潰れない。!=でも同じ  \n  --> 6. a^x == b <=> a == b^x // 移項みたいなことができる。!=でも同じ  \n7. a^b + a&b = a|b // 被ってないbit + 被ったbit = どっちかにあるbit  \n8. a^b + 2*(a&b) = a+b // 足し算とは「被ってないbit + 被ったbitの繰り上げ(x2)」\n```\n\n\n# 区間\n- 区間への操作が互いに交差してないものとみなす\n- 二次元で表す([D - AtCoder Express 2](https://atcoder.jp/contests/abc106/tasks/abc106_d))\n- 終端でソートして貪欲\n\n# 条件を満たすものの存在\n- 答えの候補となる文字列、数列などを生成しておき、その中から条件に合うものを出力\n\n\n# 言語\nC++とRubyを使うので、言語特有のTipsを書いていくつもりです。\n\n## C++\n\n### 整数型\n- `long long`\n  - -9,223,372,036,854,775,808 から 9,223,372,036,854,775,807\n  - \\\\(9 \\times 10^{18} \\\\)よりちょっとでかい\n\n## Ruby\n\n\n# 参考\n- [競技プログラミングの強みと「典型力」について - chokudaiのブログ](http://chokudai.hatenablog.com/entry/2018/04/23/165232)\n- [競技プログラミングの問題の解き方、そのマニュアル - うさぎ小屋](https://kimiyuki.net/blog/2016/06/21/how-to-solve-problems-in-competitive-programming/)",
  "bodyHtml": "<p>くさころです。ころころ。「典型力」をご存知ですか。</p>\n<p><a href=\"http://chokudai.hatenablog.com/entry/2018/04/23/165232\">競技プログラミングの強みと「典型力」について - chokudaiのブログ</a></p>\n<p>chokudaiさんの記事を読んで、干し芋のリストに「典型力」が加わったので自分なりに得た知識の言語化を試みます。\n特に、こういった知識はなかなか言語化されてないと思うので。\n内容は思いつき次第追加します。</p>\n<h2>注意</h2>\n<ul>\n<li>くさころは緑コーダーなので上級者の参考にはならないと思います</li>\n<li>自分にしかわからない書き方をしているかもしれませんし、間違った知識かもしれません。あまり鵜呑みにしないでください</li>\n<li>時間とともに更新されていく系の記事です</li>\n</ul>\n<h1>方針を立てる</h1>\n<p>書かれている順番にやれということではないです。</p>\n<ul>\n<li>\n<p>愚直な解法を考えて、そこから計算量を落とす</p>\n</li>\n<li>\n<p>前処理をすることで計算量を落とせるか</p>\n</li>\n<li>\n<p>処理を分けることで計算量を落とせるか</p>\n</li>\n<li>\n<p>分割して考えられるか、状態をまとめて扱えるか→DPを疑ってみる</p>\n</li>\n<li>\n<p>数え上げ→DPを疑ってみる</p>\n</li>\n<li>\n<p>最もシンプルな場合から着想を得る</p>\n</li>\n<li>\n<p>最大（最小）となる場合を考える</p>\n</li>\n<li>\n<p>操作</p>\n<ul>\n<li>逆から考えてみる</li>\n<li>もっとシンプルな操作に言い換えられるか</li>\n</ul>\n</li>\n<li>\n<p>知らないアルゴリズムです</p>\n<ul>\n<li>英語でググる（そのコンテストにおいて可能なら）</li>\n<li>蟻本を眺める（そのコンテストにおいて可能なら）</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://yukicoder.me/wiki/pattern\">競技プログラミング問題パターン - yukicoder</a></p>\n</li>\n</ul>\n<p>解けそうな方針が立ったら、計算量を見積もります。</p>\n<h1>計算量</h1>\n<ul>\n<li>制約によっては\\(2^N\\)を疑う</li>\n<li>\\(N=10^5\\)で\\(N\\log_2 N \\simeq 16.6 \\times 10^5 \\)</li>\n<li>\\(N=10^6\\)で\\(N\\log_2 N \\simeq 19.9 \\times 10^6 \\)</li>\n<li>\\(\\frac{N}{1} + \\frac{N}{2} + \\frac{N}{3} + ... + \\frac{N}{N} = NlogN \\)</li>\n<li>\\(N\\sqrt{N}\\)は簡単な処理で\\(N=10^5\\)くらいならたぶん間に合う（\\(N\\sqrt{N} \\simeq 316 \\times 10^5 \\simeq 3 \\times 10^8  \\)）</li>\n</ul>\n<h1>WAを出したら</h1>\n<ul>\n<li>論理\n<ul>\n<li>極端に大きな値、小さな値を入れてみる（コーナーケース）</li>\n<li>同じ値を複数入れてみる</li>\n<li>制約を見間違えてないか</li>\n<li>問題文を読み間違えてないか（<a href=\"https://9sako6.me/posts/2019/07/21/how_to_read_a_sentence/\">競技プログラミングにおける問題文の読み方</a>）</li>\n<li>\\(mod\\)計算を忘れてないか</li>\n<li>出力形式を間違えてないか</li>\n</ul>\n</li>\n<li>言語\n<ul>\n<li>オーバーフローしてないか</li>\n<li>初期化を忘れてないか</li>\n<li>十分な大きさの配列を確保しているか</li>\n<li>変数名を間違えてないか</li>\n<li>演算子の優先度によるバグ</li>\n<li>ライブラリのバグ</li>\n</ul>\n</li>\n</ul>\n<h1>グラフ</h1>\n<ul>\n<li>木とみなせるか</li>\n<li>頂点数\\(\\leq 300\\)くらいならワーシャルフロイド法の適用を疑ってみる</li>\n</ul>\n<h1>DP</h1>\n<ul>\n<li>分割して考えられるか、状態をまとめて扱えるか</li>\n<li>十分大きな配列を用意する</li>\n<li>初期化する\n<ul>\n<li>最小化なら\\(INF\\)、最大化なら\\(0\\)か\\(-INF\\)で</li>\n</ul>\n</li>\n<li>初期条件を考える</li>\n<li>DPの気持ちを思い出す（一度計算した値を再利用）</li>\n</ul>\n<h1>XOR</h1>\n<p><a href=\"https://twitter.com/TeruMiyake/status/1150695360223797248\">テルさんのツイート</a>より引用</p>\n<pre><code class=\"hljs\"><span class=\"hljs-number\">1.</span> 結合則が成り立つ <span class=\"hljs-comment\">// どんな順番で計算してもいい  </span>\n<span class=\"hljs-number\">2.</span> <span class=\"hljs-number\">2</span>つ同じものがくっつくと対消滅する <span class=\"hljs-comment\">// a^a=0。a^b=0 -&gt; a=bも言える  </span>\n<span class=\"hljs-number\">3.</span> 任意の偶数nについて、n^(n+<span class=\"hljs-number\">1</span>)=<span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 偶数の右端桁は0なので n^n^1=0^1=1  </span>\n<span class=\"hljs-number\">4.</span> a+b &gt;= a^b かつ 桁あふれしない <span class=\"hljs-comment\">// なお等号成立は「どの桁も繰り上がらないとき」  </span>\n<span class=\"hljs-number\">5.</span> a^x == b^x &lt;=&gt; a == b <span class=\"hljs-comment\">// ^x をしても式の意味が潰れない。!=でも同じ  </span>\n  --&gt; <span class=\"hljs-number\">6.</span> a^x == b &lt;=&gt; a == b^x <span class=\"hljs-comment\">// 移項みたいなことができる。!=でも同じ  </span>\n<span class=\"hljs-number\">7.</span> a^b + a&amp;b = a|b <span class=\"hljs-comment\">// 被ってないbit + 被ったbit = どっちかにあるbit  </span>\n<span class=\"hljs-number\">8.</span> a^b + <span class=\"hljs-number\">2</span>*(a&amp;b) = a+b <span class=\"hljs-comment\">// 足し算とは「被ってないbit + 被ったbitの繰り上げ(x2)」</span></code></pre><h1>区間</h1>\n<ul>\n<li>区間への操作が互いに交差してないものとみなす</li>\n<li>二次元で表す(<a href=\"https://atcoder.jp/contests/abc106/tasks/abc106_d\">D - AtCoder Express 2</a>)</li>\n<li>終端でソートして貪欲</li>\n</ul>\n<h1>条件を満たすものの存在</h1>\n<ul>\n<li>答えの候補となる文字列、数列などを生成しておき、その中から条件に合うものを出力</li>\n</ul>\n<h1>言語</h1>\n<p>C++とRubyを使うので、言語特有のTipsを書いていくつもりです。</p>\n<h2>C++</h2>\n<h3>整数型</h3>\n<ul>\n<li><code>long long</code>\n<ul>\n<li>-9,223,372,036,854,775,808 から 9,223,372,036,854,775,807</li>\n<li>\\(9 \\times 10^{18} \\)よりちょっとでかい</li>\n</ul>\n</li>\n</ul>\n<h2>Ruby</h2>\n<h1>参考</h1>\n<ul>\n<li><a href=\"http://chokudai.hatenablog.com/entry/2018/04/23/165232\">競技プログラミングの強みと「典型力」について - chokudaiのブログ</a></li>\n<li><a href=\"https://kimiyuki.net/blog/2016/06/21/how-to-solve-problems-in-competitive-programming/\">競技プログラミングの問題の解き方、そのマニュアル - うさぎ小屋</a></li>\n</ul>\n",
  "dir": "contents/posts",
  "base": "2019-07-25-typical_knowledge_of_cp.json",
  "ext": ".json",
  "sourceBase": "2019-07-25-typical_knowledge_of_cp.md",
  "sourceExt": ".md"
}