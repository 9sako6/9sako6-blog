{
  "title": "Herokuで簡単なWeb APIを作る",
  "description": "GETリクエストを送るとHello, Worldを返すだけの簡単なWeb APIを作ります...",
  "tags": [
    "Heroku",
    "WebAPI"
  ],
  "created_at": "2019-05-04T00:00:00.000Z",
  "updated_at": "2019-07-25T00:00:00.000Z",
  "draft": true,
  "bodyContent": "まずは以下の単純なWeb APIを作ります。\n\n```shell\n$ curl https://enigmatic-garden-50659.herokuapp.com/\nHello World!\n```\n\n\n# Set up\n\nまずは適当なプロジェクト用ディレクトリを作り、\nそこで`npm init`を実行して質問に答えながら`package.json`を作ります。\n\n```shell\n$ npm init\n```\n\n```json\n{\n  \"name\": \"hoge\",\n  \"version\": \"1.0.0\",\n  \"description\": \"sample web api\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"9sako6\",\n  \"license\": \"MIT\"\n}\n```\n\n次に、`Express.js`をインストールします。\n\n```shell\n$ npm install express --save\n```\n\nインストール後の`package.json`はこのようになります。\n\n```json\n{\n  \"name\": \"hoge\",\n  \"version\": \"1.0.0\",\n  \"description\": \"sample web api\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"9sako6\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"express\": \"^4.16.4\"\n  }\n}\n```\n\n# index.js\n`index.js`を作ります。\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.set('port', (process.env.PORT || 3000));\n\napp.get('/', function(request, response) {\n  response.send('Hello World!\\n');\n});\n\napp.listen(app.get('port'), function() {\n  console.log(\"Node app is running at localhost:\" + app.get('port'));\n});\n```\n\nローカルで動作確認をします。\n\n```shell\n$ node index.js\nNode app is running at localhost:3000\n```\n\n`http://localhost:3000`にアクセスし、`Hello World!`が表示されていればうまくいっています。\n\n![local server](/posts_images/2019-05-04-heroku_web_api/local.png)\n\nもしくは、`curl`で動作確認をします。\n\n```shell\n$ curl http://localhost:3000\nHello World!\n```\n\n\n# Herokuへデプロイ\nまずは現在のディレクトリを`Git`リポジトリにします。\n```shell\n$ git init\n```\n\n`.gitignore`を作ります。\n\n```txt\nnode_modules\n.DS_Store\n```\n\n続いて、`Procfile`を作ります。\n`Procfile`はアプリケーションを起動するために実行するコマンドを記述するファイルです。\n\n```txt\nweb: node index.js\n```\n\nこれでもろもろの設定は終わりで、\n最終的なディレクトリ構成は以下のようになります。\n\n```txt\n.\n├── Procfile\n├── index.js\n├── node_modules/\n├── package-lock.json\n└── package.json\n```\n\nデプロイしていきます。まずは`Heroku`にログインしておきます。\n```shell\n$ heroku login\n```\n\nそもそも`Heroku`アカウントを持っていない人は[Heroku初心者がHello, Herokuをしてみる](https://qiita.com/Arashi/items/b2f2e01259238235e187)などを参考にして作ります。\n`heroku`コマンドが使えない場合は[Getting Started on Heroku with Node.js](https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up)を参考にHeroku CLIをインストールしておきます。\n\n```shell\n$ git add .\n$ git commit -m \"deploy\"\n$ heroku create\n$ git push heroku master\n$ heroku open\n```\n\n`curl`してみて、Web APIの完成を喜びます。\n\n```shell\n$ curl https://enigmatic-garden-50659.herokuapp.com/\nHello World!\n```\n\n# ルーティング\n次は`index.js`を色々書き換えて遊びます。まずはルーティングをいじってみます。\n\n> ルーティングとは、アプリケーションが特定のエンドポイントに対するクライアント要求に応答する方法として、URI (またはパス) と特定の HTTP要求メソッド (GET、POSTなど)を決定することです。\n> 各ルートには、1つ以上のハンドラー関数があり、それらはルートが一致したときに実行されます。\n> [基本的なルーティング](https://expressjs.com/ja/starter/basic-routing.html)\n\n`Express.js`において、ルート定義は次のようにして行います。\n\n```js\napp.METHOD(PATH, HANDLER)\n```\n`app`はexpressのインスタンス、`METHOD`はHTTP要求メソッド、`PATH`は、サーバー上のパス、\n`HANDLER`は、ルートが一致したときに実行される関数です。\n試しに、先ほど作った`index.js`に新しいルート定義を追加してみます。\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.set('port', (process.env.PORT || 3000));\n\napp.get('/', function(request, response) {\n  response.send('Hello World!\\n');\n});\n\napp.get('/jp', function(request, response) {\n  response.send('こんにちは\\n');\n});\n\napp.listen(app.get('port'), function() {\n  console.log(\"Node app is running at localhost:\" + app.get('port'));\n});\n```\n\nこれは以下のように動作します。\n\n```shell\n$ curl http://localhost:3000/jp\nこんにちは\n```\n\n# クエリ\n次はクエリを取得します。\n先ほど追加したルート定義のハンドラー関数を以下のように書き換えます。\n\n```js\napp.get('/jp', function(request, response) {\n  const name = request.query.name || 'Name';\n  response.send(`こんにちは ${name}\\n`);\n});\n```\n\nこれは以下のように動作します。先ほどまでと違って、URLを`\"`で括っている点に注意します。\n\n```shell\n$ curl \"http://localhost:3000/jp?name=9sako6\"\nこんにちは 9sako6\n```\n\n# CORS\nオリジン間リソース共有 (CORS, Cross-Origin Resource Sharing)を可能にします。\nブラウザは「[同一オリジンポリシー](https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy)」という仕組みを設け、異なるオリジンのリソースへのアクセスに制約をかけています。CORSは、この制約を一部解除し、異なるオリジン間でリソースを共有するための仕組みです。\nCROSにより、任意のフロントエンドのJavaScriptコードから自作APIにリクエストできるようになります。\n\n\n```js\nconst express = require('express');\nconst app = express();\n\napp.set('port', (process.env.PORT || 3000));\n\napp.use(function(req, res, next) {\n  res.header(\"Access-Control-Allow-Origin\", '*');\n  res.header(\"Access-Control-Allow-Credentials\", true);\n  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n  res.header(\"Access-Control-Allow-Headers\", 'Origin,X-Requested-With,Content-Type,Accept,content-type,application/json');\n  next();\n});\n\napp.get('/', function(request, response) {\n  response.send('Hello World!\\n');\n});\n\napp.get('/jp', function(request, response) {\n  response.send('こんにちは\\n');\n});\n\napp.listen(app.get('port'), function() {\n  console.log(\"Node app is running at localhost:\" + app.get('port'));\n});\n```\n\n# 参考\n[All Articles - Heroku Dev Center](https://devcenter.heroku.com/articles)\n\n[Node.js(Express) 事始め ＆ Heroku へデプロイまでのメモ - Qiita](https://qiita.com/hkusu/items/e46de8c446840c50aefe)\n\n[CORS(Cross-Origin Resource Sharing) - とほほのWWW入門](http://www.tohoho-web.com/ex/cors.html)",
  "bodyHtml": "<p>まずは以下の単純なWeb APIを作ります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl https://enigmatic-garden-50659.herokuapp.com/</span>\nHello World!</code></pre><h1>Set up</h1>\n<p>まずは適当なプロジェクト用ディレクトリを作り、\nそこで<code>npm init</code>を実行して質問に答えながら<code>package.json</code>を作ります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm init</span></code></pre><pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"hoge\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"sample web api\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  },\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"9sako6\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>\n}</code></pre><p>次に、<code>Express.js</code>をインストールします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> npm install express --save</span></code></pre><p>インストール後の<code>package.json</code>はこのようになります。</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"hoge\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"sample web api\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  },\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"9sako6\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"dependencies\"</span>: {\n    <span class=\"hljs-attr\">\"express\"</span>: <span class=\"hljs-string\">\"^4.16.4\"</span>\n  }\n}</code></pre><h1>index.js</h1>\n<p><code>index.js</code>を作ります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = express();\n\napp.set(<span class=\"hljs-string\">'port'</span>, (process.env.PORT || <span class=\"hljs-number\">3000</span>));\n\napp.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  response.send(<span class=\"hljs-string\">'Hello World!\\n'</span>);\n});\n\napp.listen(app.get(<span class=\"hljs-string\">'port'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Node app is running at localhost:\"</span> + app.get(<span class=\"hljs-string\">'port'</span>));\n});</code></pre><p>ローカルで動作確認をします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> node index.js</span>\nNode app is running at localhost:3000</code></pre><p><code>http://localhost:3000</code>にアクセスし、<code>Hello World!</code>が表示されていればうまくいっています。</p>\n<p><img src=\"/posts_images/2019-05-04-heroku_web_api/local.png\" alt=\"local server\"></p>\n<p>もしくは、<code>curl</code>で動作確認をします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl http://localhost:3000</span>\nHello World!</code></pre><h1>Herokuへデプロイ</h1>\n<p>まずは現在のディレクトリを<code>Git</code>リポジトリにします。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git init</span></code></pre><p><code>.gitignore</code>を作ります。</p>\n<pre><code class=\"hljs\">node_modules\n.DS_Store</code></pre><p>続いて、<code>Procfile</code>を作ります。\n<code>Procfile</code>はアプリケーションを起動するために実行するコマンドを記述するファイルです。</p>\n<pre><code class=\"hljs\">web: node index.js</code></pre><p>これでもろもろの設定は終わりで、\n最終的なディレクトリ構成は以下のようになります。</p>\n<pre><code class=\"hljs\">.\n├── Procfile\n├── index.js\n├── node_modules/\n├── package-lock.json\n└── package.json</code></pre><p>デプロイしていきます。まずは<code>Heroku</code>にログインしておきます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> heroku login</span></code></pre><p>そもそも<code>Heroku</code>アカウントを持っていない人は<a href=\"https://qiita.com/Arashi/items/b2f2e01259238235e187\">Heroku初心者がHello, Herokuをしてみる</a>などを参考にして作ります。\n<code>heroku</code>コマンドが使えない場合は<a href=\"https://devcenter.heroku.com/articles/getting-started-with-nodejs#set-up\">Getting Started on Heroku with Node.js</a>を参考にHeroku CLIをインストールしておきます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> git add .</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git commit -m <span class=\"hljs-string\">\"deploy\"</span></span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> heroku create</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> git push heroku master</span>\n<span class=\"hljs-meta\">$</span><span class=\"bash\"> heroku open</span></code></pre><p><code>curl</code>してみて、Web APIの完成を喜びます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl https://enigmatic-garden-50659.herokuapp.com/</span>\nHello World!</code></pre><h1>ルーティング</h1>\n<p>次は<code>index.js</code>を色々書き換えて遊びます。まずはルーティングをいじってみます。</p>\n<blockquote>\n<p>ルーティングとは、アプリケーションが特定のエンドポイントに対するクライアント要求に応答する方法として、URI (またはパス) と特定の HTTP要求メソッド (GET、POSTなど)を決定することです。\n各ルートには、1つ以上のハンドラー関数があり、それらはルートが一致したときに実行されます。\n<a href=\"https://expressjs.com/ja/starter/basic-routing.html\">基本的なルーティング</a></p>\n</blockquote>\n<p><code>Express.js</code>において、ルート定義は次のようにして行います。</p>\n<pre><code class=\"hljs\">app.METHOD(PATH, HANDLER)</code></pre><p><code>app</code>はexpressのインスタンス、<code>METHOD</code>はHTTP要求メソッド、<code>PATH</code>は、サーバー上のパス、\n<code>HANDLER</code>は、ルートが一致したときに実行される関数です。\n試しに、先ほど作った<code>index.js</code>に新しいルート定義を追加してみます。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = express();\n\napp.set(<span class=\"hljs-string\">'port'</span>, (process.env.PORT || <span class=\"hljs-number\">3000</span>));\n\napp.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  response.send(<span class=\"hljs-string\">'Hello World!\\n'</span>);\n});\n\napp.get(<span class=\"hljs-string\">'/jp'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  response.send(<span class=\"hljs-string\">'こんにちは\\n'</span>);\n});\n\napp.listen(app.get(<span class=\"hljs-string\">'port'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Node app is running at localhost:\"</span> + app.get(<span class=\"hljs-string\">'port'</span>));\n});</code></pre><p>これは以下のように動作します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl http://localhost:3000/jp</span>\nこんにちは</code></pre><h1>クエリ</h1>\n<p>次はクエリを取得します。\n先ほど追加したルート定義のハンドラー関数を以下のように書き換えます。</p>\n<pre><code class=\"hljs\">app.get(<span class=\"hljs-string\">'/jp'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  <span class=\"hljs-keyword\">const</span> name = request.query.name || <span class=\"hljs-string\">'Name'</span>;\n  response.send(<span class=\"hljs-string\">`こんにちは <span class=\"hljs-subst\">${name}</span>\\n`</span>);\n});</code></pre><p>これは以下のように動作します。先ほどまでと違って、URLを<code>&quot;</code>で括っている点に注意します。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-meta\">$</span><span class=\"bash\"> curl <span class=\"hljs-string\">\"http://localhost:3000/jp?name=9sako6\"</span></span>\nこんにちは 9sako6</code></pre><h1>CORS</h1>\n<p>オリジン間リソース共有 (CORS, Cross-Origin Resource Sharing)を可能にします。\nブラウザは「<a href=\"https://developer.mozilla.org/ja/docs/Web/Security/Same-origin_policy\">同一オリジンポリシー</a>」という仕組みを設け、異なるオリジンのリソースへのアクセスに制約をかけています。CORSは、この制約を一部解除し、異なるオリジン間でリソースを共有するための仕組みです。\nCROSにより、任意のフロントエンドのJavaScriptコードから自作APIにリクエストできるようになります。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>);\n<span class=\"hljs-keyword\">const</span> app = express();\n\napp.set(<span class=\"hljs-string\">'port'</span>, (process.env.PORT || <span class=\"hljs-number\">3000</span>));\n\napp.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>) </span>{\n  res.header(<span class=\"hljs-string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"hljs-string\">'*'</span>);\n  res.header(<span class=\"hljs-string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"hljs-literal\">true</span>);\n  res.header(<span class=\"hljs-string\">'Access-Control-Allow-Methods'</span>, <span class=\"hljs-string\">'GET,PUT,POST,DELETE,OPTIONS'</span>);\n  res.header(<span class=\"hljs-string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"hljs-string\">'Origin,X-Requested-With,Content-Type,Accept,content-type,application/json'</span>);\n  next();\n});\n\napp.get(<span class=\"hljs-string\">'/'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  response.send(<span class=\"hljs-string\">'Hello World!\\n'</span>);\n});\n\napp.get(<span class=\"hljs-string\">'/jp'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">request, response</span>) </span>{\n  response.send(<span class=\"hljs-string\">'こんにちは\\n'</span>);\n});\n\napp.listen(app.get(<span class=\"hljs-string\">'port'</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"Node app is running at localhost:\"</span> + app.get(<span class=\"hljs-string\">'port'</span>));\n});</code></pre><h1>参考</h1>\n<p><a href=\"https://devcenter.heroku.com/articles\">All Articles - Heroku Dev Center</a></p>\n<p><a href=\"https://qiita.com/hkusu/items/e46de8c446840c50aefe\">Node.js(Express) 事始め ＆ Heroku へデプロイまでのメモ - Qiita</a></p>\n<p><a href=\"http://www.tohoho-web.com/ex/cors.html\">CORS(Cross-Origin Resource Sharing) - とほほのWWW入門</a></p>\n",
  "dir": "contents/posts",
  "base": "2019-05-04-heroku_web_api.json",
  "ext": ".json",
  "sourceBase": "2019-05-04-heroku_web_api.md",
  "sourceExt": ".md"
}