{
  "title": "ARC02 C - コマンド入力",
  "description": null,
  "tags": [
    "競技プログラミング",
    "パターンに一致する文字列を数える",
    "AtCoder",
    "ARC",
    "文字列",
    "Ruby"
  ],
  "created_at": "2019-11-06T00:00:00.000Z",
  "updated_at": "2019-11-07T00:00:00.000Z",
  "draft": false,
  "bodyContent": "# 問題\n[C - コマンド入力](https://atcoder.jp/contests/arc002/tasks/arc002_3)\n\nGoogle検索しにくい問題名です。たどり着いたあなたはすごいです。\n\n# 考察\n制約を見るに、全ての2つのボタンの組み合わせに対して入力回数を求めることはできそうです。\n\\\\(O(16 \\times 16 \\times 10^5 )\\\\)\n\nボタンの置き換えには注意が必要です。\n例えば、`ABABBABA`の`AB`を`L`に、`BA`を`R`に置き換えることを考えてみます。\n\nまず、`AB`を`L`にします。\n\n`LLBLA`となります。`BA`を置換できなくなりました。\n\n先に`BA`を`R`に置換してみます。\n\n`ARBRR`となります。`AB`を置換できなくなりました。\n\n置き換える時は、どちらかを先に行うのではなく、同時に行う必要があります。\nつまり、前から順に見て、`AB`, `BA`のどちらかで置き換えられるなら置き換えてしまいます。\n\nところで、前から順に置き換えていくのは最適です。\n例えば、`AB????`を`AB`, `BA`で置き換えることを考えます。\n\n1, 2文字目が`AB`なので、置き換えます。置き換えると1文字減ります。\n\nここで、置き換えない選択肢をとると、3文字目が`A`だった時に2, 3文字目を置き換えて1文字減らせます。\nしかし、1文字目の`A`は再利用できないまま残り続けます。さらに、2,3文字目を置き換えてしまったことにより、3,4文字目を置き換えるという選択肢はなくなります。\n\n置き換えない選択肢を取ることによっていいことは起こりません。\n\n\n実装する時は、文字列そのものを置き換えるのではなく置き換えた後の文字列の長さをカウントするようにしました。\n\n\n```ruby\n# l, r はAB, BAのようなコマンド\ndef cnt(s, l, r)\n  res = 0\n  i = 0\n  while i < s.size\n    res += 1\n    if s[i, 2] == l || s[i, 2] == r\n      i += 2\n    else\n      i += 1\n    end\n  end\n  res\nend\n```\n\n[submission](https://atcoder.jp/contests/arc002/submissions/8303412)",
  "bodyHtml": "<h1>問題</h1>\n<p><a href=\"https://atcoder.jp/contests/arc002/tasks/arc002_3\">C - コマンド入力</a></p>\n<p>Google検索しにくい問題名です。たどり着いたあなたはすごいです。</p>\n<h1>考察</h1>\n<p>制約を見るに、全ての2つのボタンの組み合わせに対して入力回数を求めることはできそうです。\n\\(O(16 \\times 16 \\times 10^5 )\\)</p>\n<p>ボタンの置き換えには注意が必要です。\n例えば、<code>ABABBABA</code>の<code>AB</code>を<code>L</code>に、<code>BA</code>を<code>R</code>に置き換えることを考えてみます。</p>\n<p>まず、<code>AB</code>を<code>L</code>にします。</p>\n<p><code>LLBLA</code>となります。<code>BA</code>を置換できなくなりました。</p>\n<p>先に<code>BA</code>を<code>R</code>に置換してみます。</p>\n<p><code>ARBRR</code>となります。<code>AB</code>を置換できなくなりました。</p>\n<p>置き換える時は、どちらかを先に行うのではなく、同時に行う必要があります。\nつまり、前から順に見て、<code>AB</code>, <code>BA</code>のどちらかで置き換えられるなら置き換えてしまいます。</p>\n<p>ところで、前から順に置き換えていくのは最適です。\n例えば、<code>AB????</code>を<code>AB</code>, <code>BA</code>で置き換えることを考えます。</p>\n<p>1, 2文字目が<code>AB</code>なので、置き換えます。置き換えると1文字減ります。</p>\n<p>ここで、置き換えない選択肢をとると、3文字目が<code>A</code>だった時に2, 3文字目を置き換えて1文字減らせます。\nしかし、1文字目の<code>A</code>は再利用できないまま残り続けます。さらに、2,3文字目を置き換えてしまったことにより、3,4文字目を置き換えるという選択肢はなくなります。</p>\n<p>置き換えない選択肢を取ることによっていいことは起こりません。</p>\n<p>実装する時は、文字列そのものを置き換えるのではなく置き換えた後の文字列の長さをカウントするようにしました。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\"># l, r はAB, BAのようなコマンド</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">cnt</span><span class=\"hljs-params\">(s, l, r)</span></span>\n  res = <span class=\"hljs-number\">0</span>\n  i = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">while</span> i &lt; s.size\n    res += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">if</span> s[i, <span class=\"hljs-number\">2</span>] == l <span class=\"hljs-params\">||</span> s[i, <span class=\"hljs-number\">2</span>] == r\n      i += <span class=\"hljs-number\">2</span>\n    <span class=\"hljs-keyword\">else</span>\n      i += <span class=\"hljs-number\">1</span>\n    <span class=\"hljs-keyword\">end</span>\n  <span class=\"hljs-keyword\">end</span>\n  res\n<span class=\"hljs-keyword\">end</span></code></pre><p><a href=\"https://atcoder.jp/contests/arc002/submissions/8303412\">submission</a></p>\n",
  "dir": "contents/posts",
  "base": "2019-11-06-arc002_c.json",
  "ext": ".json",
  "sourceBase": "2019-11-06-arc002_c.md",
  "sourceExt": ".md"
}