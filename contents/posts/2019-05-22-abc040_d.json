{
  "title": "ABC040 D - 道路の老朽化対策について (100点)",
  "description": "Union-Find（素集合データ構造, Disjoint-set Data Structure）を使って解く。 ただし、各質問ごとにUnion-Findを構築すると間に合わない。 そこで、...",
  "tags": [
    "競技プログラミング",
    "AtCoder",
    "Union-Find木",
    "Python3",
    "ABC-D"
  ],
  "created_at": "2019-05-22T00:00:00.000Z",
  "updated_at": "2019-05-23T00:00:00.000Z",
  "draft": false,
  "bodyContent": "# 問題\n[D - 道路の老朽化対策について](https://atcoder.jp/contests/abc040/tasks/abc040_d)\n\n# 解法\nUnion-Find木（素集合データ構造, Disjoint-set Data Structure）を使って解く。\nただし、各質問ごとにUnion-Find木を構築すると間に合わない。\nそこで、各質問における道が新しい順にUnion-Find木を構築していく。この工夫が本問題の肝である。\n道が新しい順にUnion-Find木を構築していくと、次の質問に答える時に道が増えることがあっても減ることはない。\n\n```python\nfrom sys import stdin\ndef input():\n    return stdin.readline()[:-1]\n \nclass UnionFind:\n    def __init__(self, n):\n        self.parent = [-1 for _ in range(n)]\n \n    def root(self, x):\n        if self.parent[x] < 0:\n            return x\n        self.parent[x] = self.root(self.parent[x])\n        return self.parent[x]\n \n    def size(self, x):\n        return -self.parent[self.root(x)]\n \n    def merge(self, x, y):\n        x = self.root(x)\n        y = self.root(y)\n        if x == y:\n            return False\n \n        if self.size(x) < self.size(y):\n            x, y = y, x\n        self.parent[x] += self.parent[y]\n        self.parent[y] = x\n        return True\n \nN,M=map(int, input().split())\naby=[list(map(int, input().split())) for _ in range(M)]\nQ=int(input())\nivw = [[i] + list(map(int, input().split())) for i in range(Q)]\n \naby.sort(key=lambda x: x[2], reverse=True)\nivw.sort(key=lambda x: x[2], reverse=True)\n \nans = [0]*Q\nuf = UnionFind(N)\nj = 0\nfor i,v,w in ivw:\n    while j < M and w < aby[j][2]:\n        uf.merge(aby[j][0]-1, aby[j][1]-1)\n        j += 1\n    ans[i] = uf.size(v-1)\n \nprint('\\n'.join(map(str, ans)))\n```\n\n# 学び\nPythonで挑戦してTLEに苦しみましたが、\n`input()`ではなく`sys.stdin.readline()`を使うようにしただけで通りました。とはいえコードに改善の余地がありそう。\n\n@@\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">ええええええええ<br>input()の代わりにstdin.readline()使っただけで通った<br>えええええええええええ <a href=\"https://t.co/WEQiQ9Np1E\">pic.twitter.com/WEQiQ9Np1E</a></p>&mdash; 🌾くさころ🌾 (@9sako6) <a href=\"https://twitter.com/9sako6/status/1122073726894260225?ref_src=twsrc%5Etfw\">2019年4月27日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n@@",
  "bodyHtml": "<h1>問題</h1>\n<p><a href=\"https://atcoder.jp/contests/abc040/tasks/abc040_d\">D - 道路の老朽化対策について</a></p>\n<h1>解法</h1>\n<p>Union-Find木（素集合データ構造, Disjoint-set Data Structure）を使って解く。\nただし、各質問ごとにUnion-Find木を構築すると間に合わない。\nそこで、各質問における道が新しい順にUnion-Find木を構築していく。この工夫が本問題の肝である。\n道が新しい順にUnion-Find木を構築していくと、次の質問に答える時に道が増えることがあっても減ることはない。</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">from</span> sys <span class=\"hljs-keyword\">import</span> stdin\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">input</span><span class=\"hljs-params\">()</span>:</span>\n    <span class=\"hljs-keyword\">return</span> stdin.readline()[:<span class=\"hljs-number\">-1</span>]\n \n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">UnionFind</span>:</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span><span class=\"hljs-params\">(self, n)</span>:</span>\n        self.parent = [<span class=\"hljs-number\">-1</span> <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(n)]\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">root</span><span class=\"hljs-params\">(self, x)</span>:</span>\n        <span class=\"hljs-keyword\">if</span> self.parent[x] &lt; <span class=\"hljs-number\">0</span>:\n            <span class=\"hljs-keyword\">return</span> x\n        self.parent[x] = self.root(self.parent[x])\n        <span class=\"hljs-keyword\">return</span> self.parent[x]\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">size</span><span class=\"hljs-params\">(self, x)</span>:</span>\n        <span class=\"hljs-keyword\">return</span> -self.parent[self.root(x)]\n \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(self, x, y)</span>:</span>\n        x = self.root(x)\n        y = self.root(y)\n        <span class=\"hljs-keyword\">if</span> x == y:\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">False</span>\n \n        <span class=\"hljs-keyword\">if</span> self.size(x) &lt; self.size(y):\n            x, y = y, x\n        self.parent[x] += self.parent[y]\n        self.parent[y] = x\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">True</span>\n \nN,M=map(int, input().split())\naby=[list(map(int, input().split())) <span class=\"hljs-keyword\">for</span> _ <span class=\"hljs-keyword\">in</span> range(M)]\nQ=int(input())\nivw = [[i] + list(map(int, input().split())) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> range(Q)]\n \naby.sort(key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">2</span>], reverse=<span class=\"hljs-literal\">True</span>)\nivw.sort(key=<span class=\"hljs-keyword\">lambda</span> x: x[<span class=\"hljs-number\">2</span>], reverse=<span class=\"hljs-literal\">True</span>)\n \nans = [<span class=\"hljs-number\">0</span>]*Q\nuf = UnionFind(N)\nj = <span class=\"hljs-number\">0</span>\n<span class=\"hljs-keyword\">for</span> i,v,w <span class=\"hljs-keyword\">in</span> ivw:\n    <span class=\"hljs-keyword\">while</span> j &lt; M <span class=\"hljs-keyword\">and</span> w &lt; aby[j][<span class=\"hljs-number\">2</span>]:\n        uf.merge(aby[j][<span class=\"hljs-number\">0</span>]<span class=\"hljs-number\">-1</span>, aby[j][<span class=\"hljs-number\">1</span>]<span class=\"hljs-number\">-1</span>)\n        j += <span class=\"hljs-number\">1</span>\n    ans[i] = uf.size(v<span class=\"hljs-number\">-1</span>)\n \nprint(<span class=\"hljs-string\">'\\n'</span>.join(map(str, ans)))</code></pre><h1>学び</h1>\n<p>Pythonで挑戦してTLEに苦しみましたが、\n<code>input()</code>ではなく<code>sys.stdin.readline()</code>を使うようにしただけで通りました。とはいえコードに改善の余地がありそう。</p>\n<p>@@\n&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ええええええええ&lt;br&gt;input()の代わりにstdin.readline()使っただけで通った&lt;br&gt;えええええええええええ &lt;a href=&quot;https://t.co/WEQiQ9Np1E&quot;&gt;pic.twitter.com/WEQiQ9Np1E&lt;/a&gt;&lt;/p&gt;— 🌾くさころ🌾 (@9sako6) &lt;a href=&quot;https://twitter.com/9sako6/status/1122073726894260225?ref_src=twsrc%5Etfw&quot;&gt;2019年4月27日&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;\n@@</p>\n",
  "dir": "contents/posts",
  "base": "2019-05-22-abc040_d.json",
  "ext": ".json",
  "sourceBase": "2019-05-22-abc040_d.md",
  "sourceExt": ".md"
}